@article{queralt_verification_2012,
	title = {Verification and Validation of {UML} Conceptual Schemas with {OCL} Constraints},
	volume = {21},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/2089116.2089123},
	doi = {10.1145/2089116.2089123},
	abstract = {To ensure the quality of an information system, it is essential that the conceptual schema that represents the knowledge about its domain is semantically correct. The semantic correctness of a conceptual schema can be seen from two different perspectives. On the one hand, from the point of view of its definition, a conceptual schema must be right. This is ensured by means of verification techniques that check whether the schema satisfies several correctness properties. On the other hand, from the point of view of the requirements that the information system should satisfy, a schema must also be the right one. This is ensured by means of validation techniques, which help the designer understand the exact meaning of a schema and to see whether it corresponds to the requirements. In this article we propose an approach to verify and validate {UML} conceptual schemas, with arbitrary constraints formalized in {OCL}. We have also implemented our approach to show its feasibility.},
	pages = {13:1--13:41},
	number = {2},
	journaltitle = {{ACM} Trans. Softw. Eng. Methodol.},
	author = {Queralt, Anna and Teniente, Ernest},
	urldate = {2022-12-06},
	date = {2012-03-01},
	keywords = {{OCL}, Conceptual modeling, constraints},
}

@article{larsen_uppaal_1997,
	title = {Uppaal in a nutshell},
	volume = {1},
	issn = {1433-2779},
	url = {https://doi.org/10.1007/s100090050010},
	doi = {10.1007/s100090050010},
	pages = {134--152},
	number = {1},
	journaltitle = {Int. J. Softw. Tools Technol. Transf.},
	author = {Larsen, Kim G. and Pettersson, Paul and Yi, Wang},
	urldate = {2022-12-06},
	date = {1997-12-01},
	keywords = {Key words: Modeling real-time systems --- Dynamic modeling --- Modeling tools --- Uppaal},
}

@book{mermet_uml-b_2013,
	edition = {2004e édition},
	title = {{UML}-B Specification for Proven Embedded Systems Design},
	pagetotal = {309},
	publisher = {Springer},
	author = {Mermet, Jean},
	date = {2013-03-19},
}

@inproceedings{crane_uml_2005,
	location = {Berlin, Heidelberg},
	title = {{UML} vs. classical vs. rhapsody statecharts: not all models are created equal},
	isbn = {978-3-540-29010-0},
	url = {https://doi.org/10.1007/11557432_8},
	doi = {10.1007/11557432_8},
	series = {{MoDELS}'05},
	shorttitle = {{UML} vs. classical vs. rhapsody statecharts},
	abstract = {State machines, represented by statecharts or statechart diagrams, are an important formalism for behavioural modelling. According to the research literature, the most popular statechart formalisms appear to be Classical, {UML}, and that implemented by Rhapsody. These three formalisms seem to be very similar; however, there are several key syntactic and semantic differences. These differences are enough that a model written in one formalism could be ill-formed in another formalism. Worse, a model from one formalism might actually be well-formed in another, but be interpreted differently due to the semantic differences. This paper summarizes the results of a comparative study of these three formalisms with the help of several illustrative examples. Then, we present a classification of the differences together with a comprehensive overview.},
	pages = {97--112},
	booktitle = {Proceedings of the 8th international conference on Model Driven Engineering Languages and Systems},
	publisher = {Springer-Verlag},
	author = {Crane, Michelle L. and Dingel, Juergen},
	urldate = {2022-12-06},
	date = {2005-10-02},
}

@inproceedings{lanotte_timed_2005,
	location = {{USA}},
	title = {Timed Automata with Data Structures for Distributed Systems Design and Analysis},
	isbn = {978-0-7695-2435-1},
	url = {https://doi.org/10.1109/SEFM.2005.49},
	doi = {10.1109/SEFM.2005.49},
	series = {{SEFM} '05},
	abstract = {Systems of Data Management Timed Automata ({SDMTAs}) are networks of communicating timed automata with structures to store messages and functions to manipulate them. We prove the decidability of reachability. As an application, we model and analyze a cryptographic protocol.},
	pages = {44--53},
	booktitle = {Proceedings of the Third {IEEE} International Conference on Software Engineering and Formal Methods},
	publisher = {{IEEE} Computer Society},
	author = {Lanotte, Ruggero and Maggiolo-Schettini, Andrea and Troina, Angelo},
	urldate = {2022-12-06},
	date = {2005-09-07},
}

@article{harel_statemate_1996,
	title = {The {STATEMATE} semantics of statecharts},
	volume = {5},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/235321.235322},
	doi = {10.1145/235321.235322},
	abstract = {We describe the semantics of statecharts as implemented in the {STATEMATE} system. This was the first executable semantics defined for the language and has been in use for almost a decade. In terms of the controversy around whether changes made in a given step should take effect in the current step or in the next one, this semantics adopts the latter approach.},
	pages = {293--333},
	number = {4},
	journaltitle = {{ACM} Trans. Softw. Eng. Methodol.},
	author = {Harel, David and Naamad, Amnon},
	urldate = {2022-12-06},
	date = {1996-10-01},
	keywords = {behavioral modeling, reactive system, semantics, statechart, {STATEMATE}},
	file = {Full Text PDF:/home/mariano/Zotero/storage/2G6ENKQP/Harel et Naamad - 1996 - The STATEMATE semantics of statecharts.pdf:application/pdf},
}

@book{kaynar_theory_2010,
	location = {San Rafael, Calif.},
	edition = {2e édition},
	title = {The Theory of Timed I/O Automata, Second Edition},
	isbn = {978-1-60845-002-2},
	pagetotal = {138},
	publisher = {Morgan \& Claypool Publishers},
	author = {Kaynar, Dilsun and Lynch, Nancy and Segala, Roberto and Vaandrager, Frits},
	date = {2010-12-01},
}

@inproceedings{berrada_testing_2005,
	location = {Berlin, Heidelberg},
	title = {Testing Communicating Systems: a Model, a Methodology, and a Tool},
	isbn = {978-3-540-32076-0},
	doi = {10.1007/11430230_9},
	series = {Lecture Notes in Computer Science},
	shorttitle = {Testing Communicating Systems},
	abstract = {This paper follows two main lines of research. The first line is related to the study of models for the description of systems. For this line, we introduce the model of Communicating Systems ({CS}), which defines a set of common resources, a set of entities, and a topology of communication. The second line focuses on testing methodologies adapted to protocol testing. For this line, we give a formal definition of a generic generation algorithm ({GGA}). We demonstrate that the {CS} model with a {GGA} supports various 1) test architectures, 2) test types: conformance, interoperability, embedded, component testing, and 3) test approaches: passive and active testing. The paper presents also the main characteristics of the {TGSE} tool (Test Generation, Simulation, and Emulation). {TGSE} is made-up of a test case generator, based on the {CS} model and implementing a {GGA}, a graphic simulator of the execution of a sequence generated by {TGSE}, and a real-time emulator of communicating specifications. In its current version, {TGSE} supports the passive and active testing of one or several components with data and temporal constraints.},
	pages = {111--128},
	booktitle = {Testing of Communicating Systems},
	publisher = {Springer},
	author = {Berrada, Ismaïl and Castanet, Richard and Félix, Patrick},
	editor = {Khendek, Ferhat and Dssouli, Rachida},
	date = {2005},
	langid = {english},
	keywords = {Active Testing, Conformance Testing, Coverage Criterion, Test Generation, Test Purpose},
	file = {Full Text PDF:/home/mariano/Zotero/storage/PIIQBTMT/Berrada et al. - 2005 - Testing Communicating Systems a Model, a Methodol.pdf:application/pdf},
}

@article{cassez_structural_2006,
	title = {Structural translation from time petri nets to timed automata},
	volume = {29},
	url = {https://hal.archives-ouvertes.fr/hal-00139236},
	abstract = {In this paper, we consider Time Petri Nets ({TPN}) where time is associated with transitions. We give a formal semantics for {TPNs} in terms of Timed Transition Systems. Then, we propose a translation from {TPNs} to Timed Automata ({TA}) that preserves the behavioral semantics (timed bisimilarity) of the {TPNs}. For the theory of {TPNs} this result is two-fold: i) reachability problems and more generally {TCTL} model-checking are decidable for bounded {TPNs}; ii) allowing strict time constraints on transitions for {TPNs} preserves the results described in i). The practical appli- cations of the translation are: i) one can specify a system using both {TPNs} and Timed Automata and a precise semantics is given to the composition; ii) one can use existing tools for analyzing timed automata (like Kronos, Uppaal or Cmc) to analyze {TPNs}. In this paper we describe the new feature of the tool Romeo that implements our translation of {TPNs} in the Uppaal input format. We also report on experiments carried out on various examples and compare the result of our method to state-of-the-art tool for analyzing {TPNs}.},
	pages = {1456--1468},
	number = {1},
	journaltitle = {Journal of Systems and Software},
	author = {Cassez, Franck and Roux, Olivier Henri},
	urldate = {2022-12-06},
	date = {2006},
	note = {Publisher: Elsevier},
	keywords = {Model-checking, Time Petri Nets, Timed automata},
	file = {HAL PDF Full Text:/home/mariano/Zotero/storage/FETWZH57/Cassez et Roux - 2006 - Structural translation from time petri nets to tim.pdf:application/pdf},
}

@inproceedings{eshuis_requirements-level_2000,
	location = {Boston, {MA}},
	title = {Requirements-Level Semantics for {UML} Statecharts},
	isbn = {978-0-387-35520-7},
	doi = {10.1007/978-0-387-35520-7_6},
	series = {{IFIP} Advances in Information and Communication Technology},
	abstract = {We propose a formal real-time semantics for {UML} statecharts aimed at the requirements level. A requirements-level model assumes perfect technology and has a considerably simpler semantics than an implementation level model. Our semantics is an adaptation of the Statemate statechart semantics, with local variables, real time, identifier addressing, point-to-point communication, synchronous communication and dynamic object creation and deletion. We start with an informal comparison of Statemate and {UML} statechart semantics and then give a formalisation of our semantics in terms of labelled transition systems.},
	pages = {121--140},
	booktitle = {Formal Methods for Open Object-Based Distributed Systems {IV}},
	publisher = {Springer {US}},
	author = {Eshuis, Rik and Wieringa, Roel},
	editor = {Smith, Scott F. and Talcott, Carolyn L.},
	date = {2000},
	langid = {english},
	keywords = {{UML}, statecharts, formal semantics},
	file = {Full Text PDF:/home/mariano/Zotero/storage/EVNEQVNZ/Eshuis et Wieringa - 2000 - Requirements-Level Semantics for UML Statecharts.pdf:application/pdf},
}

@article{tan_systematic_2006,
	title = {Systematic Transformation of Functional Analysis Model into {OO} Design and Implementation},
	volume = {32},
	issn = {0098-5589},
	url = {https://www.computer.org/csdl/journal/ts/2006/02/e0111/13rRUyYSWmI},
	doi = {10.1109/TSE.2006.20},
	abstract = {Functional refinement is beneficial to Object-Oriented ({OO}) software development, especially for problems with more complex functions. However, the use of functional refinement in {OO} software development has not received much attention. This paper proposes an enhanced data flow diagram ({DFD}), called data flow net ({DF} net), for specifying use-cases through functional decomposition. It proposes a novel approach to complement existing {OO} software development methods with functional decomposition for realizing use-cases, especially those with more complex functions. In the requirements analysis stage, the proposed approach realizes use-cases through functional refinement and specifies them in {DF} nets. In the design and implementation stages, it transforms the {DF} nets systematically and precisely into {OO} design and implementation. The approach is amenable to automation and a prototype has been developed to support the transformation process. In the development of an {OO} system, it is seamless to realize some of the use-cases using the proposed approach and the remaining use-cases in the same target system using any existing {OO} software development methods.},
	pages = {111--135},
	number = {2},
	journaltitle = {{IEEE} Transactions on Software Engineering},
	author = {Tan, Hee Beng Kuan and Yang, Yong and Bian, Lei},
	urldate = {2022-12-06},
	date = {2006-02-01},
	note = {Publisher: {IEEE} Computer Society},
	file = {Snapshot:/home/mariano/Zotero/storage/Z2I7IFDI/13rRUyYSWmI.html:text/html},
}

@article{henzinger_symbolic_1994,
	title = {Symbolic Model Checking for Real-Time Systems},
	volume = {111},
	issn = {0890-5401},
	url = {https://www.sciencedirect.com/science/article/pii/S0890540184710455},
	doi = {10.1006/inco.1994.1045},
	abstract = {We describe finite-state programs over real-numbered time in a guarded-command language with real-valued clocks or, equivalently, as finite automata with real-valued clocks. Model checking answers the question which states of a real-time program satisfy a branching-time specification (given in an extension of {CTL} with clock variables). We develop an algorithm that computes this set of states symbolically as a fixpoint of a functional on state predicates, without constructing the state space. For this purpose, we introduce a μ-calculus on computation trees over real-numbered time. Unfortunately, many standard program properties, such as response for all nonzeno execution sequences (during which time diverges), cannot be characterized by fixpoints: we show that the expressiveness of the timed μ-calculus is incomparable to the expressiveness of timed {CTL}. Fortunately, this result does not impair the symbolic verification of "implementable" real-time programs-those whose safety constraints are machine-closed with respect to diverging time and whose fairness constraints are restricted to finite upper bounds on clock values. All timed {CTL} properties of such programs are shown to be computable as finitely approximable fixpoints in a simple decidable theory.},
	pages = {193--244},
	number = {2},
	journaltitle = {Information and Computation},
	author = {Henzinger, T. A. and Nicollin, X. and Sifakis, J. and Yovine, S.},
	urldate = {2022-12-06},
	date = {1994-06-01},
	langid = {english},
	file = {ScienceDirect Full Text PDF:/home/mariano/Zotero/storage/J9DPA5FU/Henzinger et al. - 1994 - Symbolic Model Checking for Real-Time Systems.pdf:application/pdf;ScienceDirect Snapshot:/home/mariano/Zotero/storage/GDZ8B6M4/S0890540184710455.html:text/html},
}

@inproceedings{daws_reducing_1996,
	title = {Reducing the number of clock variables of timed automata.},
	volume = {96},
	pages = {73},
	booktitle = {rtss},
	author = {Daws, Conrado and Yovine, Sergio},
	date = {1996},
}

@article{lanotte_reachability_2010,
	title = {Reachability results for timed automata with unbounded data structures},
	volume = {47},
	doi = {10.1007/s00236-010-0121-8},
	abstract = {Systems of Data Management Timed Automata ({SDMTAs}) are networks of communicating timed automata with structures to store messages
and functions to manipulate them. We prove the decidability of the reachability problem for a subclass of {SDMTAs} which assumes
an unbounded knowledge, and we analyze the expressiveness of the model and the considered subclass. In particular, while {SDMTAs}
can simulate a Turing machine, and hence the reachability problem is in general undecidable, the subclass for which reachability
is decidable, when endowed with a concept of recognized language, accepts languages that are not regular. As an application,
we model and analyze a variation of the Yahalom protocol.},
	pages = {279--311},
	journaltitle = {Acta Inf.},
	author = {Lanotte, Ruggero and Maggiolo-Schettini, Andrea and Troina, Angelo},
	date = {2010-09-01},
	file = {Full Text PDF:/home/mariano/Zotero/storage/QWJJD56B/Lanotte et al. - 2010 - Reachability results for timed automata with unbou.pdf:application/pdf},
}

@article{malavolta_providing_2010,
	title = {Providing Architectural Languages and Tools Interoperability through Model Transformation Technologies},
	volume = {36},
	issn = {1939-3520},
	doi = {10.1109/TSE.2009.51},
	abstract = {Many architectural languages have been proposed in the last 15 years, each one with the chief aim of becoming the ideal language for specifying software architectures. What is evident nowadays, instead, is that architectural languages are defined by stakeholder concerns. Capturing all such concerns within a single, narrowly focused notation is impossible. At the same time, it is also impractical to define and use a "universal" notation, such as {UML}. As a result, many domain-specific notations for architectural modeling have been proposed, each one focusing on a specific application domain, analysis type, or modeling environment. As a drawback, a proliferation of languages exists, each one with its own specific notation, tools, and domain specificity. No effective interoperability is possible to date. Therefore, if a software architect has to model a concern not supported by his own language/tool, he has to manually transform (and, eventually, keep aligned) the available architectural specification into the required language/tool. This paper presents {DUALLy}, an automated framework that allows architectural languages and tools interoperability. Given a number of architectural languages and tools, they can all interoperate thanks to automated model transformation techniques. {DUALLy} is implemented as an Eclipse plugin. Putting it in practice, we apply the {DUALLy} approach to the Darwin/{FSP} {ADL} and to a {UML}2.0 profile for software architectures. By making use of an industrial complex system, we transform a {UML} software architecture specification in Darwin/{FSP}, make some verifications by using {LTSA}, and reflect changes required by the verifications back to the {UML} specification.},
	pages = {119--140},
	number = {1},
	journaltitle = {{IEEE} Transactions on Software Engineering},
	author = {Malavolta, Ivano and Muccini, Henry and Pelliccione, Patrizio and Tamburri, Damien},
	date = {2010-01},
	note = {Conference Name: {IEEE} Transactions on Software Engineering},
	keywords = {Domain specific languages, Application software, Architecture description languages, Computer architecture, Computer industry, design tools and techniques, domain-specific architectures, interoperability, {LAN} interconnection, model transformations., Software architecture, Software architectures, Software systems, Software tools, Unified modeling language},
	file = {IEEE Xplore Abstract Record:/home/mariano/Zotero/storage/DKHUBK2K/5204094.html:text/html},
}

@article{borger_formalizing_2004,
	title = {On formalizing {UML} state machines using {ASMs}},
	volume = {46},
	issn = {0950-5849},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584903002027},
	doi = {10.1016/j.infsof.2003.09.009},
	series = {Special Issue on Software Engineering,  Applications, Practices and Tools from the {ACM} Symposium on Applied Computing 2003},
	abstract = {We present a transparent yet rigorous conceptual framework for defining the semantics of dynamic {UML} diagrams. We illustrate the method for {UML} state machines, making the “semantic variation points” of {UML} explicit, as well as various ambiguities and omissions in the official {UML} documents. This includes the event deferring and completion mechanism, the meaning of atomic and durative actions, concurrent internal activities and conflict situations which may arise through the concurrent behavior of active objects.},
	pages = {287--292},
	number = {5},
	journaltitle = {Information and Software Technology},
	author = {Börger, Egon and Cavarra, Alessandra and Riccobene, Elvinia},
	urldate = {2022-12-06},
	date = {2004-04-15},
	langid = {english},
	file = {ScienceDirect Snapshot:/home/mariano/Zotero/storage/8QHD8ZA7/S0950584903002027.html:text/html},
}

@article{peres_composition_2011,
	title = {On the composition of time Petri nets},
	volume = {21},
	issn = {1573-7594},
	url = {https://doi.org/10.1007/s10626-011-0102-2},
	doi = {10.1007/s10626-011-0102-2},
	abstract = {Complex systems are often designed and built from smaller pieces, called components. Components are open sub-systems meant to be combined (or composed) to form other components or closed systems. It is well known that Petri nets allow such a component based modeling, relying on parallel composition and transition synchronization. However, synchronizing transitions that carry temporal constraints does not yield a compositional method for assembling components, a highly desirable property. The paper addresses this particular problem: how to build complex systems in a compositional manner from components specified by Time Petri nets ({TPN}). A first solution is proposed, adequate for a particular subclass of Time Petri nets but significantly increasing the complexity of components. Then an improved solution is developed, relying on an extension of Time Petri nets with two relations added on transitions. This latter solution requires a much simpler transformation of nets, does not significantly increase their complexity, and is applicable to a larger class of {TPN}.},
	pages = {395},
	number = {3},
	journaltitle = {Discrete Event Dyn Syst},
	author = {Peres, Florent and Berthomieu, Bernard and Vernadat, François},
	urldate = {2022-12-06},
	date = {2011-04-28},
	langid = {english},
	keywords = {Composition, Compositionality, Time Petri nets},
}

@article{sun_modeling_2013,
	title = {Modeling and verifying hierarchical real-time systems using stateful timed {CSP}},
	volume = {22},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/2430536.2430537},
	doi = {10.1145/2430536.2430537},
	abstract = {Modeling and verifying complex real-time systems are challenging research problems. The de facto approach is based on Timed Automata, which are finite state automata equipped with clock variables. Timed Automata are deficient in modeling hierarchical complex systems. In this work, we propose a language called Stateful Timed {CSP} and an automated approach for verifying Stateful Timed {CSP} models. Stateful Timed {CSP} is based on Timed {CSP} and is capable of specifying hierarchical real-time systems. Through dynamic zone abstraction, finite-state zone graphs can be generated automatically from Stateful Timed {CSP} models, which are subject to model checking. Like Timed Automata, Stateful Timed {CSP} models suffer from Zeno runs, that is, system runs that take infinitely many steps within finite time. Unlike Timed Automata, model checking with non-Zenoness in Stateful Timed {CSP} can be achieved based on the zone graphs. We extend the {PAT} model checker to support system modeling and verification using Stateful Timed {CSP} and show its usability/scalability via verification of real-world systems.},
	pages = {3:1--3:29},
	number = {1},
	journaltitle = {{ACM} Trans. Softw. Eng. Methodol.},
	author = {Sun, Jun and Liu, Yang and Dong, Jin Song and Liu, Yan and Shi, Ling and André, Étienne},
	urldate = {2022-12-06},
	date = {2013-03-04},
	keywords = {Non-Zenoness, {PAT}, Stateful Timed {CSP}, Zone Abstraction},
}

@inproceedings{knapp_model_2002,
	location = {Berlin, Heidelberg},
	title = {Model Checking Timed {UML} State Machines and Collaborations},
	isbn = {978-3-540-45739-8},
	doi = {10.1007/3-540-45739-9_23},
	series = {Lecture Notes in Computer Science},
	abstract = {We describe a prototype tool, {HUGO}/{RT}, that is designed to automatically verify whether the timed state machines in a {UML} model interact according to scenarios specified by time-annotated {UML} collaborations. Timed state machines are compiled into timed automata that exchange signals and operations via a network automaton. A collaboration with time constraints is translated into an observer timed automaton. The model checker {UPPAAL} is called upon to verify the timed automata representing the model against the observer timed automaton.},
	pages = {395--414},
	booktitle = {Formal Techniques in Real-Time and Fault-Tolerant Systems},
	publisher = {Springer},
	author = {Knapp, Alexander and Merz, Stephan and Rauh, Christopher},
	editor = {Damm, Werner and Olderog, Ernst -Rüdiger},
	date = {2002},
	langid = {english},
	keywords = {Critical Section, Event Queue, Model Check, State Machine, Time Automaton},
	file = {Full Text PDF:/home/mariano/Zotero/storage/MMJ6FFFX/Knapp et al. - 2002 - Model Checking Timed UML State Machines and Collab.pdf:application/pdf},
}

@article{ma_nonblocking_2006,
	title = {Nonblocking supervisory control of state tree structures},
	volume = {51},
	issn = {1558-2523},
	doi = {10.1109/TAC.2006.875030},
	abstract = {It is well known that the nonblocking supervisory control problem is {NP}-hard, subject in particular to state space explosion that is exponential in the number of system components. In this paper we propose to manage complexity by organizing the system as a state tree structure ({STS}). {STS} are an adaptation of statecharts to supervisory control theory. Based on {STS} we present an efficient recursive symbolic algorithm that can perform nonblocking supervisory control design (in reasonable time and memory) for systems of state size 10/sup 24/ and higher. The resulting controllers are tractable and readily comprehensible.},
	pages = {782--793},
	number = {5},
	journaltitle = {{IEEE} Transactions on Automatic Control},
	author = {Ma, Chuan and Wonham, W.M.},
	date = {2006-05},
	note = {Conference Name: {IEEE} Transactions on Automatic Control},
	keywords = {Algorithm design and analysis, Automata, Binary decision diagrams, Control system synthesis, Discrete-event system, Explosions, nonblocking supervisory control, Organizing, Sociotechnical systems, state tree structure ({STS}), State-space methods, Supervisory control, symbolic computation, Tree data structures},
	file = {IEEE Xplore Abstract Record:/home/mariano/Zotero/storage/PNHSPRKA/1632306.html:text/html},
}

@inproceedings{andre_modeling_2007,
	location = {Berlin, Heidelberg},
	title = {Modeling time(s)},
	isbn = {978-3-540-75208-0},
	series = {{MODELS}'07},
	abstract = {Time and timing features are an important aspect of modern electronic systems, often of embedded nature. We argue here that in early design phases, time is often of logical (rather than physical) nature, even possibly multiform. The compilation/synthesis of heterogeneous applications onto architecture platforms then largely amounts to adjusting the former logical time(s) demands onto the latter physical time abilities. Many distributed scheduling techniques pertain to this approach of "time refinement". We provide extensive Time and Allocation metamodels that open the possibility to cast this approach in a Model-Driven Engineering light. We give a {UML} representation of these concepts through two subprofiles, parts of the foundations of the forthcoming {OMG} {UML} Profile for Modeling and Analysis of Real-Time and Embedded systems ({MARTE}). Time modeling also allows for a precise description of time-related entities and their associated timed properties.},
	pages = {559--573},
	booktitle = {Proceedings of the 10th international conference on Model Driven Engineering Languages and Systems},
	publisher = {Springer-Verlag},
	author = {André, Charles and Mallet, Frédéric and De Simone, Robert},
	urldate = {2022-12-05},
	date = {2007-09-30},
	keywords = {real-time embedded, {UML} profile},
}

@article{distefano_uml_2011,
	title = {From {UML} to Petri nets: The {PCM}-based methodology},
	volume = {37},
	doi = {10.1109/TSE.2010.10},
	shorttitle = {From {UML} to Petri nets},
	abstract = {In this paper, we present an evaluation methodology to validate the performance of a {UML} model, representing a software architecture. The proposed approach is based on open and well-known standards: {UML} for software modeling and the {OMG} Profile for Schedulability, Performance, and Time Specification for the performance annotations into {UML} models. Such specifications are collected in an intermediate model, called the Performance Context Model ({PCM}). The intermediate model is translated into a performance model which is subsequently evaluated. The paper is focused on the mapping from the {PCM} to the performance domain. More specifically, we adopt Petri nets as the performance domain, specifying a mapping process based on a compositional approach we have entirely implemented in the {ArgoPerformance} tool. All of the rules to derive a Petri net from a {PCM} and the performance measures assessable from the former are carefully detailed. To validate the proposed technique, we provide an in-depth analysis of a web application for music streaming.},
	pages = {65--79},
	journaltitle = {Software Engineering, {IEEE} Transactions on},
	author = {Distefano, Salvatore and Scarpa, Marco and Puliafito, Antonio},
	date = {2011-03-01},
	file = {Full Text PDF:/home/mariano/Zotero/storage/UNRBRD2I/Distefano et al. - 2011 - From UML to Petri nets The PCM-based methodology.pdf:application/pdf},
}

@article{ghazel_formalizing_2014,
	title = {Formalizing a subset of {ERTMS}/{ETCS} specifications for verification purposes},
	volume = {42},
	issn = {0968-090X},
	url = {https://www.sciencedirect.com/science/article/pii/S0968090X14000345},
	doi = {10.1016/j.trc.2014.02.002},
	abstract = {{ERTMS} is the standard railway control-command and signaling system which aims to ensure railway interoperability throughout Europe while enhancing safety and competitiveness. {ERTMS} is composed of two main subsystems which include {GSM}-R, a radio system for enabling communication between the train and the traffic management center and {ETCS}, an automatic train protection system ({ATP}) to replace the existing national {ATP} systems. The {ERTMS} specifications are defined by means of standard documents which set out the requirements ensuring interoperability. These documents evolve regularly to give rise to successive versions. The {ERTMS}/{ETCS} standard defines different levels and operation modes according to various trackside and onboard setups and some operational conditions. Given the complexity and the high criticality of railway operation, verification and validation (V\&V) are crucial tasks in railway application development. In this paper, after setting the background and the motivations, a mechanizable formalization of a subset of {ERTMS}/{ETCS} specifications relative to {ETCS} modes and transitions is developed. The present work aims to offer a readily available model for formal V\&V. Using formal techniques to check {SRS} is highly recommended to tackle the complexity of the defined requirements and prevent specification errors. Model-checking technique, which is targeted here, offers exhaustive analysis of the system behavior based on its model and is highly automated, since it is supported by software tools. Based on the last available version of {SRS} specifications, a progressive process is undertaken to get a formal model which makes explicit the various modes characterized by their respective active functions, as well as the numerous combinations of conditions for switching between modes. The various steps guiding the translation of the {SRS} literal specifications into a formal model are explained. As will be shown through different examples, the obtained model is a convenient basis to check safety, interoperability and liveness properties.},
	pages = {60--75},
	journaltitle = {Transportation Research Part C: Emerging Technologies},
	author = {Ghazel, Mohamed},
	urldate = {2022-12-06},
	date = {2014-05-01},
	langid = {english},
	keywords = {Model-checking, {ERTMS}/{ETCS}, Formalization, Railway interoperability, Railway safety, Specification, Verification and validation},
	file = {ScienceDirect Snapshot:/home/mariano/Zotero/storage/U67FFI7G/S0968090X14000345.html:text/html},
}

@book{douglass_doing_1999,
	location = {Boston},
	edition = {1er édition},
	title = {Doing Hard Time: Developing Real-Time Systems with {UML}, Objects, Frameworks, and Patterns},
	isbn = {978-0-321-77493-4},
	shorttitle = {Doing Hard Time},
	pagetotal = {800},
	publisher = {Addison Wesley},
	author = {Douglass, Bruce Powel},
	date = {1999-05-11},
}

@article{mallet_ccsl_2008,
	title = {{CCSL}: specifying clock constraints with {UML}/{MARTE}},
	volume = {4},
	url = {https://hal.inria.fr/inria-00371371},
	doi = {10.1007/s11334-008-0055-2},
	shorttitle = {{CCSL}},
	abstract = {The Object Management Group ({OMG}) Unified Modeling Manguage ({UML}) profile for Modeling and Analysis of Real-Time and Embedded systems ({MARTE}) aims at using the general-purpose modeling language {UML} in the domain of Real-Time and Embedded ({RTE}) systems. To achieve this goal, it is absolutely required to introduce inside the mainly untimed {UML} an unambiguous time structure which {MARTE} model elements can rely on to build precise models amenable to formal analysis. The {MARTE} Time model has defined such a structure. We have also defined a non-normative concrete syntax called the Clock Constraint Specification Language ({CCSL}) to demonstrate what can be done based on this structure. This paper gives a brief overview of this syntax and its formal semantics, and shows how existing {UML} model elements can be used to apply this syntax in a graphical way and benefit from the semantics.},
	pages = {309},
	number = {3},
	journaltitle = {Innovations in Systems and Software Engineering},
	author = {Mallet, Frédéric},
	urldate = {2022-12-06},
	date = {2008},
	langid = {english},
	file = {Full Text PDF:/home/mariano/Zotero/storage/P27PQTCM/Mallet - 2008 - CCSL specifying clock constraints with UMLMARTE.pdf:application/pdf;Snapshot:/home/mariano/Zotero/storage/F63DZKRM/inria-00371371.html:text/html},
}

@article{nugroho_level_2009,
	title = {Level of detail in {UML} models and its impact on model comprehension: A controlled experiment},
	volume = {51},
	issn = {0950-5849},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584909000408},
	doi = {10.1016/j.infsof.2009.04.007},
	series = {Quality of {UML} Models},
	shorttitle = {Level of detail in {UML} models and its impact on model comprehension},
	abstract = {Previous studies have shown that the style and rigor used in {UML} models vary widely across software projects [1], [2], [3]. However, notwithstanding the varying use of styles and rigor, little research has been conducted to investigate the drivers and effects of using different styles and rigor in modeling on software development. In this paper, we evaluate Level of Detail ({LoD}) in {UML} models as a form of style and rigor in {UML} modeling. Using a {UML} model of a library system, we experimentally investigate the impact of {LoD} on model comprehension. More specifically, we explore whether {LoD} in {UML} models affects the correctness and efficiency in comprehending {UML} models. Using two independent groups of graduate students majoring in computer science, we performed a controlled experiment. The results of the experiment confirm the significant effect of {LoD} in {UML} models on model comprehension. Nevertheless, replication of this study is necessary, especially in contexts that involve professional software engineers, to improve the generalizability of the results.},
	pages = {1670--1685},
	number = {12},
	journaltitle = {Information and Software Technology},
	author = {Nugroho, Ariadi},
	urldate = {2022-12-06},
	date = {2009-12-01},
	langid = {english},
	keywords = {Comprehension, Experiment, Level of detail, Model quality, {UML} model},
	file = {ScienceDirect Snapshot:/home/mariano/Zotero/storage/ECTBDC9A/S0950584909000408.html:text/html},
}

@inproceedings{krcal_communicating_2006,
	location = {Berlin, Heidelberg},
	title = {Communicating timed automata: the more synchronous, the more difficult to verify},
	isbn = {978-3-540-37406-0},
	url = {https://doi.org/10.1007/11817963_24},
	doi = {10.1007/11817963_24},
	series = {{CAV}'06},
	shorttitle = {Communicating timed automata},
	abstract = {We study channel systems whose behaviour (sending and receiving messages via unbounded {FIFO} channels) must follow given timing constraints specifying the execution speeds of the local components. We propose Communicating Timed Automata ({CTA}) to model such systems. The goal is to study the borderline between decidable and undecidable classes of channel systems in the timed setting. Our technical results include: (1) {CTA} with one channel without shared states in the form (A1,A2, c1,2) is equivalent to one-counter machine, implying that verification problems such as checking state reachability and channel boundedness are decidable, and (2) {CTA} with two channels without sharing states in the form (A1,A2,A3, c1,2,c2,3) has the power of Turing machines. Note that in the untimed setting, these systems are no more expressive than finite state machines. This shows that the capability of synchronizing on time makes it substantially more difficult to verify channel systems.},
	pages = {249--262},
	booktitle = {Proceedings of the 18th international conference on Computer Aided Verification},
	publisher = {Springer-Verlag},
	author = {Krcal, Pavel and Yi, Wang},
	urldate = {2022-12-06},
	date = {2006-08-17},
	file = {Texte intégral:/home/mariano/Zotero/storage/C572FXJQ/Krcal et Yi - 2006 - Communicating timed automata the more synchronous.pdf:application/pdf},
}

@collection{halldorsson_automata_2015,
	location = {Berlin, Heidelberg},
	title = {Automata, Languages, and Programming: 42nd International Colloquium, {ICALP} 2015, Kyoto, Japan, July 6-10, 2015, Proceedings, Part I},
	volume = {9134},
	url = {http://link.springer.com/10.1007/978-3-662-47672-7},
	series = {Lecture Notes in Computer Science},
	shorttitle = {Automata, Languages, and Programming},
	publisher = {Springer},
	editor = {Halldórsson, Magnús M. and Iwama, Kazuo and Kobayashi, Naoki and Speckmann, Bettina},
	urldate = {2022-12-05},
	date = {2015},
	langid = {english},
	doi = {10.1007/978-3-662-47672-7},
	keywords = {Automata, Algorithms, Categorical semantics, Computational complexity, Constraint satisfaction, Convex optimization, Directed algebraic topology, Dynamic graph algorithms, Foundations of networked computation, Game theory, Logics, Parameterised complexity, Probabilistic systems, Signature schemes, Social networks, Streaming, Theoretical computer science, Theory of programming, Transducer, Universal algebra},
}

@article{ghazel_uml_2004,
	title = {An {UML} approach for the metamodelling of automated production systems for monitoring purpose},
	volume = {55},
	issn = {0166-3615},
	url = {https://www.sciencedirect.com/science/article/pii/S0166361504000648},
	doi = {10.1016/j.compind.2004.08.005},
	series = {Object-oriented modelling in design and production},
	abstract = {The paper deals with monitoring experts’ models in order to integrate them in a global reference framework, which takes into account the different viewpoints relating to the design and exploitation of automated production systems. Metamodelling is used to obtain a single language of modelling and integration is used to obtain a single global model, which offers an overall coherent interpretation of the different viewpoints.},
	pages = {283--299},
	number = {3},
	journaltitle = {Computers in Industry},
	author = {Ghazel, Mohamed and Toguyéni, Armand and Bigand, Michel},
	urldate = {2022-12-06},
	date = {2004-12-01},
	langid = {english},
	keywords = {{UML}, Automated production systems, Functional graph, Metamodelling, Modelling approach, Monitoring, Supervision},
	file = {ScienceDirect Snapshot:/home/mariano/Zotero/storage/RKZVHG2D/S0166361504000648.html:text/html},
}

@article{alur_theory_1994,
	title = {A theory of timed automata},
	volume = {126},
	issn = {0304-3975},
	url = {https://www.sciencedirect.com/science/article/pii/0304397594900108},
	doi = {10.1016/0304-3975(94)90010-8},
	abstract = {We propose timed (finite) automata to model the behavior of real-time systems over time. Our definition provides a simple, and yet powerful, way to annotate state-transition graphs with timing constraints using finitely many real-valued clocks. A timed automaton accepts timed words–infinite sequences in which a real-valued time of occurrence is associated with each symbol. We study timed automata from the perspective of formal language theory: we consider closure properties, decision problems, and subclasses. We consider both nondeterministic and deterministic transition structures, and both Büchi and Muller acceptance conditions. We show that nondeterministic timed automata are closed under union and intersection, but not under complementation, whereas deterministic timed Muller automata are closed under all Boolean operations. The main construction of the paper is an ({PSPACE}) algorithm for checking the emptiness of the language of a (nondeterministic) timed automaton. We also prove that the universality problem and the language inclusion problem are solvable only for the deterministic automata: both problems are undecidable (Π11-hard) in the nondeterministic case and {PSPACE}-complete in the deterministic case. Finally, we discuss the application of this theory to automatic verification of real-time requirements of finite-state systems.},
	pages = {183--235},
	number = {2},
	journaltitle = {Theoretical Computer Science},
	author = {Alur, Rajeev and Dill, David L.},
	urldate = {2022-12-05},
	date = {1994-04-25},
	langid = {english},
	file = {ScienceDirect Full Text PDF:/home/mariano/Zotero/storage/2PT5I3TJ/Alur et Dill - 1994 - A theory of timed automata.pdf:application/pdf;ScienceDirect Snapshot:/home/mariano/Zotero/storage/WKEFH96U/0304397594900108.html:text/html},
}

@inproceedings{koziolek_model_2008,
	location = {Berlin, Heidelberg},
	title = {A Model Transformation from the Palladio Component Model to Layered Queueing Networks},
	isbn = {978-3-540-69814-2},
	abstract = {For component-based performance engineering, software component developers individually create performance specifications of their components. Software architects compose these specifications to architectural models. This enables assessing the possible fulfilment of performance requirements without the need to purchase and deploy the component implementations. Many existing performance models do not support component-based performance engineering but offer efficient solvers. On the other hand, component-based performance engineering approaches often lack tool support. We present a model transformation combining the advanced component concepts of the Palladio Component Model ({PCM}) with the efficient performance solvers of Layered Queueing Networks ({LQN}). Joining the tool-set for {PCM} specifications with the tool-set for {LQN} solution is an important step to carry component-based performance engineering into industrial practice. We validate the correctness of the transformation by mapping the {PCM} model of a component-based architecture to an {LQN} and conduct performance predictions.},
	pages = {58--78},
	booktitle = {Performance Evaluation: Metrics, Models and Benchmarks},
	publisher = {Springer},
	author = {Koziolek, Heiko and Reussner, Ralf},
	editor = {Kounev, Samuel and Gorton, Ian and Sachs, Kai},
	date = {2008},
	keywords = {Loop Body, Model Transformation, Performance Prediction, Resource Demand, System Deployer},
}

@article{damm_discrete-time_2005,
	title = {A Discrete-Time {UML} Semantics for concurrency and communication in safety-critical applications},
	volume = {55},
	doi = {10.1016/j.scico.2004.05.012},
	abstract = {We define a subset {krtUML} of {UML} which is rich enough to express such modelling entities of {UML}, used in real-time applications, as active objects, dynamic object creation and destruction, dynamically changing communication topologies, combinations of synchronous and asynchronous communication, and shared memory usage through object attributes. We define a formal interleaving semantics for this kernel language by associating with each model M {krtUML} a symbolic transition system {STS}(M ). We shortly outline how to compile models of industrial systems making use of generalisation hierarchies, weak- and strong aggregation, and hierarchical state-machines into {krtUML}. The main aim of the paper is to provide an executable semantics for {krtUML} suitable for the formal verification of temporal model properties with existing model-checking tools.},
	pages = {81--115},
	journaltitle = {Science of Computer Programming},
	author = {Damm, Werner and Josko, Bernhard and Pnueli, Amir and Votintseva, Anjelika},
	date = {2005-03-01},
	file = {Texte intégral:/home/mariano/Zotero/storage/M7M7ZTMI/Damm et al. - 2005 - A Discrete-Time UML Semantics for concurrency and .pdf:application/pdf},
}

@inproceedings{liu_formal_2013,
	location = {Berlin, Heidelberg},
	title = {A Formal Semantics for Complete {UML} State Machines with Communications},
	isbn = {978-3-642-38613-8},
	series = {Lecture Notes in Computer Science},
	abstract = {{UML} is a widely used notation, and formalizing its semantics is an important issue. Here, we concentrate on formalizing {UML} state machines, used to express the dynamic behaviour of software systems. We propose a formal operational semantics covering all features of the latest version (2.4.1) of {UML} state machines specification. We use labelled transition systems as the semantic model, so as to use automatic verification techniques like model checking. Furthermore, our proposed semantics includes synchronous and asynchronous communications between state machines. We implement our approach in {USM}2C, a model checker supporting editing, simulation and automatic verification of {UML} state machines. Experiments show the effectiveness of our approach.},
	pages = {331--346},
	booktitle = {Integrated Formal Methods},
	publisher = {Springer},
	author = {Liu, Shuang and Liu, Yang and André, Étienne and Choppy, Christine and Sun, Jun and Wadhwa, Bimlesh and Dong, Jin Song},
	editor = {Johnsen, Einar Broch and Petre, Luigia},
	date = {2013},
	keywords = {Model Check, State Machine, Event Pool, Formal Semantic, Linear Temporal Logic},
}

@inproceedings{fecher_29_2005,
	location = {Berlin, Heidelberg},
	title = {29 new unclarities in the semantics of {UML} 2.0 state machines},
	isbn = {978-3-540-29797-0},
	url = {https://doi.org/10.1007/11576280_5},
	doi = {10.1007/11576280_5},
	series = {{ICFEM}'05},
	abstract = {{UML} 2.0, which is the standard modeling language for object-oriented systems, has only an informally given semantics. This is in particular the case for {UML} 2.0 state machines, which are widely used for modeling the reactive behavior of objects. In this paper, a list of 29 newly detected trouble spots consisting of ambiguities, inconsistencies, and unnecessarily strong restrictions of {UML} 2.0 state machines is given and illustrated using 6 state machines having a problematic meaning; suggestions for improvement are presented. In particular, we show that the concepts of history, priority, and entry/exit points have to be reconsidered.},
	pages = {52--65},
	booktitle = {Proceedings of the 7th international conference on Formal Methods and Software Engineering},
	publisher = {Springer-Verlag},
	author = {Fecher, Harald and Schönborn, Jens and Kyas, Marcel and de Roever, Willem-Paul},
	urldate = {2022-12-06},
	date = {2005-11-01},
}

@Comment{jabref-meta: databaseType:biblatex;}

@book{chalendar_defi_2021,
    address = {Paris},
    title = {Le {Défi} urbain: {Retrouver} le désir de vivre en ville},
    isbn = {978-2-7381-5618-1},
    shorttitle = {Le {Défi} urbain},
    abstract = {La ville qui paraissait hier séduisante, sophistiquée, lieu de tous les possibles, a cédé la place dans nos imaginaires à la ville tentaculaire, oppressante, polluée, sale, voire dangereuse avec la diffusion des épidémies. Alors comment faire renaître le désir de ville ? Que faut-il transformer pour qu’elle redevienne un objet amical aux hommes et à l’environnement ?Convaincu du nouvel avenir de la ville, Pierre-André de Chalendar propose avec ce livre de redéfinir un modèle urbain qui favorise l’inclusion sociale et inscrit tout projet innovant dans une logique participative, véritable signature de la « ville durable ». Un modèle où la nature et la ville ne s’opposent plus, où les mobilités sont fluides et décarbonées ; et où les bâtiments, durables et performants, apportent confort et santé, et répondent aux aspirations, renforcées par la crise sanitaire, à vivre mieux, ensemble.« Les villes sont nos centres culturels et économiques les plus dynamiques, mais elles sont aujourd’hui confrontées à une série de problèmes complexes. Le Défi urbain nous aide à imaginer comment elles peuvent changer et se développer, et devenir des lieux plus verts, plus sains et plus prospères pour tous. » Michael Bloomberg, a été maire de New York de 2002 à 2013, Il est le fondateur de Bloomberg LP et de Bloomberg Philanthropies.},
    language = {fr},
    publisher = {Odile Jacob},
    author = {Chalendar, Pierre-André de},
    month = may,
    year = {2021},
}